pipeline {
  agent {
    any {
      image 'ubuntu:latest'
      args '-u root' // use root to install packages and access Docker
    }
  }
  environment {
    PROJECT_CODE = 'AgentTest1'
    API_URL = credentials('ScanServer') 
    API_TOKEN = credentials('ScanToken')
    QUAY_USERNAME = credentials('QuayLogin')
    QUAY_PASSWORD = credentials('Secret Text')
  }

  stages {

    stage('FossidGetDiffScan') {
      steps {
        checkout scm
 
          def base = sh(script: "git merge-base origin/${env.CHANGE_TARGET} origin/${env.CHANGE_BRANCH}", returnStdout: true).trim()
          def changedFiles = sh(script: "git diff --name-only --diff-filter=d ${base} ${env.CHANGE_BRANCH}", returnStdout: true).trim()

          if (changedFiles == "") {
            currentBuild.description = "No file changes detected"
            env.HAS_CHANGES = "false"
          } else {
            env.HAS_CHANGES = "true"
            sh "mkdir -p analyzed_code"
            changedFiles.split('\n').each { file ->
              def dir = "analyzed_code/" + file.take(file.lastIndexOf('/') + 1)
              sh "mkdir -p ${dir}"
              sh "cp ${file} analyzed_code/${file}"
            }
          }
        }
      }
    }

    stage('Login to Quay') {
      when {
        expression { env.HAS_CHANGES == 'true' }
      }
      steps {
        sh """
          echo "$QUAY_PASSWORD" | docker login quay.io -u "$QUAY_USERNAME" --password-stdin
        """
      }
    }

    stage('ScanDiff') {
      when {
        expression { env.HAS_CHANGES == 'true' }
      }
      steps {
        sh """
          mkdir -p results
          docker pull quay.io/fossid/workbench-agent:0.4.2
          docker run --rm \
            -v "\$(pwd)/analyzed_code:/tmp/analyzed_code" \
            -v "\$(pwd)/results:/tmp/results" \
            quay.io/fossid/workbench-agent:0.4.2 \
            --api_url "$API_URL" \
            --api_user "$API_USER" \
            --api_token "$API_TOKEN" \
            --project_code "$PROJECT_CODE" \
            --scan_code "${env.GIT_COMMIT}" \
            --blind_scan \
            --path "/tmp/analyzed_code" \
            --limit 1 \
            --auto_identification_detect_declaration \
            --auto_identification_detect_copyright \
            --auto_identification_resolve_pending_ids \
            --delta_only \
            --path-result "/tmp/results/wb_result.json"
        """
      }
    }

    stage('Show Results') {
      when {
        expression { env.HAS_CHANGES == 'true' }
      }
      steps {
        sh 'cat results/wb_result.json | head -n 50'
      }
    }

    stage('Skip Scan - No Changes') {
      when {
        expression { env.HAS_CHANGES == 'false' }
      }
      steps {
        echo "No file changes detected in this pull request. Skipping scan."
      }
    }
  }
}
